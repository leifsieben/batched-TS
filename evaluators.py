import useful_rdkit_utils as uru
import warnings
try:
    from openeye import oechem
    from openeye import oeomega
    from openeye import oeshape
except ImportError:
    # Since openeye is a commercial software package, just pass with a warning if not available
    warnings.warn(f"Openeye packages not available in this environment; do not attempt to use ROCSEvaluator")
from rdkit import Chem, DataStructs


class MWEvaluator:
    """A simple evaluation class that calculates molecular weight, this was just a development tool
    """

    def __init__(self):
        self.num_evaluations = 0

    def get_num_evaluations(self):
        return self.num_evaluations

    def evaluate(self, mol):
        self.num_evaluations += 1
        return uru.MolWt(mol)


class FPEvaluator:
    """An evaluator class that calculates a fingerprint Tanimoto to a reference molecule
    """

    def __init__(self, ref_smiles):
        self.ref_fp = uru.smi2morgan_fp(ref_smiles)
        self.num_evaluations = 0

    def get_num_evaluations(self):
        return self.num_evaluations

    def evaluate(self, rd_mol_in):
        self.num_evaluations += 1
        rd_mol_fp = uru.mol2morgan_fp(rd_mol_in)
        return DataStructs.TanimotoSimilarity(self.ref_fp, rd_mol_fp)


class ROCSEvaluator:
    """An evaluator class that calculates a ROCS score to a reference molecule
    """

    def __init__(self, ref_filename):
        ref_fs = oechem.oemolistream(ref_filename)
        self.ref_mol = oechem.OEMol()
        oechem.OEReadMolecule(ref_fs, self.ref_mol)
        self.max_confs = 50
        self.score_cache = {}
        self.num_evaluations = 0

    def get_num_evaluations(self):
        return self.num_evaluations

    def set_max_confs(self, max_confs):
        """Set the maximum number of conformers generated by Omega
        :param max_confs:
        """
        self.max_confs = max_confs

    def generate_confs(self, mol):
        """Generate conformers with Omega
        :param mol: input molecule
        :return: Boolean Omega return code indicating success of conformer generation
        """
        rms = 0.5
        strict_stereo = False
        omega = oeomega.OEOmega()
        omega.SetRMSThreshold(rms)  # Word to the wise: skipping this step can lead to significantly different charges!
        omega.SetStrictStereo(strict_stereo)
        omega.SetMaxConfs(self.max_confs)
        error_level = oechem.OEThrow.GetLevel()
        # Turn off OEChem warnings
        oechem.OEThrow.SetLevel(oechem.OEErrorLevel_Error)
        status = omega(mol)
        # Turn OEChem warnings back on
        oechem.OEThrow.SetLevel(error_level)
        return status

    def evaluate(self, rd_mol_in):
        """Generate conformers with Omega and evaluate the ROCS overlay of conformers to a reference molecule
        :param rd_mol_in: Input RDKit molecule
        :return: ROCS Tanimoto Combo score, returns -1 if conformer generation fails
        """
        self.num_evaluations += 1
        smi = Chem.MolToSmiles(rd_mol_in)
        # Look up to see if we already processed this molecule
        arc_tc = self.score_cache.get(smi)
        if arc_tc is not None:
            tc = arc_tc
        else:
            fit_mol = oechem.OEMol()
            oechem.OEParseSmiles(fit_mol, smi)
            ret_code = self.generate_confs(fit_mol)
            if ret_code:
                tc = self.overlay(fit_mol)
            else:
                tc = -1.0
            self.score_cache[smi] = tc
        return tc

    def overlay(self, fit_mol):
        """Use ROCS to overlay two molecules
        :param fit_mol: OEMolecule
        :return: Combo Tanimoto for the overlay
        """
        prep = oeshape.OEOverlapPrep()
        prep.Prep(self.ref_mol)
        overlay = oeshape.OEMultiRefOverlay()
        overlay.SetupRef(self.ref_mol)
        prep.Prep(fit_mol)
        score = oeshape.OEBestOverlayScore()
        overlay.BestOverlay(score, fit_mol, oeshape.OEHighestTanimoto())
        return score.GetTanimotoCombo()


if __name__ == "__main__":
    rocs_eval = ROCSEvaluator("data/2chw_lig.sdf")
    mol = oechem.OEMol()
    smi = "CCSc1ncc2c(=O)n(-c3c(C)nc4ccccn34)c(-c3[nH]nc(C)c3F)nc2n1"
    oechem.OEParseSmiles(mol, smi)
    combo_score = rocs_eval.evaluate(mol)
    print(combo_score)
